{"version":3,"sources":["lib/configuredActions.ts","modules/debug/duck.ts","modules/debug/containers/DebugMenuContainer.tsx","modules/message/__mocks__/message.ts","lib/uniqueId.ts","modules/message/MessageService.ts","lib/createThunk.ts","lib/objects.ts","modules/message/duck.ts","modules/message/containers/MessageForm.tsx","modules/message/containers/MessagePane.tsx","modules/chat/__mocks__/chat.ts","modules/chat/ChatService.ts","modules/chat/duck.ts","modules/chat/containers/ChatContainer.tsx","App.tsx","root.ts","index.tsx"],"names":["createSlice","initialState","prefix","handlerMap","configureAction","type","reduce","prefixedType","payload","sliceManager","reducer","state","action","handler","update","updates","latency","shouldRequestsFail","debugReducer","DebugMenuContainer","connect","debug","dispatch","props","style","background","color","padding","marginTop","value","onChange","e","Number","currentTarget","checked","getRandomMessages","Date","now","toISOString","recipientId","arr","texts","sort","Math","random","slice","ceil","length","map","text","i","id","String","sent","sender","uniqueId","split","pop","MessageService","window","store","getState","Promise","resolve","setTimeout","Error","message","config","initialAsyncActionState","loading","error","lastUpdate","args","createThunk","asyncFn","start","done","fail","a","startAction","result","doneAction","failAction","handleUpdate","onUpdate","undefined","omit","obj","k","clone","initialMessageState","messages","loadAllState","sendStates","t","r","innerAction","key","messagesByChatIdReducer","appendMessage","cancelMessage","tempId","updateSendStates","sendState","sendRequest","loadAll","sendMessage","send","actions","push","batchActions","MessageFormContainer","chat","activeChat","bindActionCreators","useState","setMessage","noValidate","onSubmit","preventDefault","checkValidity","display","width","flexGrow","required","className","alignItems","paddingLeft","MessagePaneContainer","chatId","useSelector","messageState","recipient","useDispatch","useEffect","thunk","shouldCall","options","loadAllIfNeeded","maxAge","shallowEqual","Fragment","Object","keys","request","opacity","onClick","mockChats","name","ChatService","chats","loadChatsState","chatReducer","setActiveChat","loadChats","ChatsContainer","App","height","borderRight","flexDirection","position","top","right","rootReducer","enableBatching","combineReducers","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","createStore","applyMiddleware","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.669cad6e.chunk.js","sourcesContent":["import { Reducer } from 'redux';\n\nexport interface Action<TPayload> {\n    type: string;\n    payload: TPayload;\n}\n\ntype Reduce<S, P> = (payload: P) => (state: S) => S;\n\ninterface Slice<S> {\n    reducer: Reducer<S>;\n    configureAction: <P>(type: string, reduce: Reduce<S, P>) => (payload: P) => Action<P>;\n    update: <K extends keyof S>(updates: Pick<S, K>) => Action<Pick<S, K>>;\n}\n\ninterface SliceDictionary<S> {\n    reducer: Reducer<Partial<{ [key: string]: S }>>;\n    configureAction: <P>(type: string, reduce: Reduce<S, P>) => (key: string, payload: P) => Action<{ key: string; action: Action<P> }>;\n    update: <K extends keyof S>(key: string, updates: Pick<S, K>) => Action<{ key: string; action: Action<Pick<S, K>> }>;\n}\n\nexport const createSlice = <S>(initialState: S, prefix = ''): Slice<S> => {\n    const handlerMap: Record<string, (payload: any) => (state: S) => S> = {};\n\n    const configureAction: Slice<S>['configureAction'] = (type, reduce) => {\n        const prefixedType = prefix + '/' + type;\n        handlerMap[prefixedType] = reduce;    \n        return payload => ({ type: prefixedType, payload });\n    };\n\n    const sliceManager: Slice<S> = {\n        configureAction,\n        reducer: (state = initialState, action) => {\n            const handler = handlerMap[action.type];\n            if (handler) {\n                return handler(action.payload)(state);\n            }\n            return state;\n        },\n        update: configureAction('UPDATE', updates => state => ({ ...state, ...updates })),\n    };\n\n    return sliceManager;\n};\n\nexport const createSliceDictionary = <S>(type: string, slice: Slice<S>): SliceDictionary<S> => {\n    return {\n        configureAction: (t, r) => {\n            const innerAction = slice.configureAction(t, r);\n            return (key, payload) => ({ type, payload: { key, action: innerAction(payload) } });\n        },\n        reducer: (state = {}, action) => {\n            if (action.type === type) {\n                const { key } = action.payload;\n                return { ...state, [key]: slice.reducer(state[key], action.payload.action) };\n            }\n            return state;\n        },\n        update: (key, updates) => ({ type, payload: { key, action: slice.update(updates) } })\n    };\n};\n","import { createSlice } from 'lib/configuredActions';\n\nexport interface DebugState {\n    latency: number;\n    shouldRequestsFail: boolean;\n}\n\nconst initialState: DebugState = {\n    latency: 500,\n    shouldRequestsFail: false,\n};\n\nconst { reducer, update } = createSlice(initialState, 'DEBUG');\nexport const debugReducer = reducer;\n\nexport { update };\n","import React from 'react';\nimport { DebugState, update } from '../duck';\nimport { connect } from 'react-redux';\nimport { Dispatch } from 'redux';\nimport { RootState } from 'root';\n\ninterface DebugMenuProps {\n    debug: DebugState;\n    update: <K extends keyof DebugState>(updates: Pick<DebugState, K>) => void;\n}\nconst DebugMenu: React.FC<DebugMenuProps> = props => {\n    return (\n        <div style={{ background: 'rgba(0, 0, 0, 0.6)', color: 'white', padding: 10 }}>\n            <h3 style={{ marginTop: 0 }}>Debug menu</h3>\n            <div>\n                <label>\n                    Latency\n                    <input\n                        type=\"number\"\n                        value={props.debug.latency}\n                        onChange={e => props.update({ latency: Number(e.currentTarget.value) })}\n                    />\n                </label>\n            </div>\n            <div>\n                <label>\n                    <input\n                        type=\"checkbox\"\n                        checked={props.debug.shouldRequestsFail}\n                        onChange={e => props.update({ shouldRequestsFail: e.currentTarget.checked })}\n                    />\n                    Make api requests fail\n                </label>\n            </div>\n        </div>\n    );\n};\n\nconst mapStateToProps = (state: RootState) => ({\n    debug: state.debug,\n});\nconst mapDispatchToProps = (dispatch: Dispatch) => ({ update: <K extends keyof DebugState>(updates: Pick<DebugState, K>) => dispatch(update(updates)) });\n\nexport const DebugMenuContainer = connect(mapStateToProps, mapDispatchToProps)(DebugMenu);\n","import { Message } from '../types';\n\nexport const mockMessages: Message[] = [\n    {\n        id: '1',\n        text: 'hi',\n        sent: new Date(Date.now() - 1000 * 60 * 3).toISOString(),\n        sender: 'them',\n        recipientId: '',\n    },\n    {\n        id: '2',\n        text: 'hey',\n        sent: new Date(Date.now() - 1000 * 60 * 2.5).toISOString(),\n        sender: 'you',\n        recipientId: '',\n    },\n    {\n        id: '3',\n        text: 'sup',\n        sent: new Date(Date.now() - 1000 * 60 * 2.25).toISOString(),\n        sender: 'them',\n        recipientId: '',\n    },\n];\n\nconst shuffle = <T>(arr: T[]): T[] => {\n    return [ ...arr ].sort(() => Math.random() - 0.5);\n};\n\nexport const getRandomMessages = (recipientId: string) => {\n    const texts = [ 'hey', 'hi', 'sup', 'yo', 'you up?' ];\n    const randomTexts = shuffle(texts).slice(0, Math.ceil(Math.random() * texts.length));\n\n    return randomTexts.map((text, i) => ({\n        id: String(i),\n        text,\n        sent: new Date(Date.now() - 1000 * i).toISOString(),\n        sender: 'you',\n        recipientId,\n    }));\n};\n","export const uniqueId = () => String(Math.random()).split('.').pop()!;\n","import { Message } from './types';\nimport { getRandomMessages } from './__mocks__/message';\nimport { uniqueId } from 'lib/uniqueId';\n\nexport class MessageService {\n\n    static async loadAll(recipientId: string): Promise<Message[]> {\n        const { debug } = (window as any).store.getState();\n        await new Promise(resolve => setTimeout(resolve, debug.latency));\n        if (debug.shouldRequestsFail) {\n            throw new Error('Simulated failure');\n        }\n        return getRandomMessages(recipientId);\n    }\n\n    static async send(recipientId: string, text: string): Promise<Message> {\n        const { debug } = (window as any).store.getState();\n        await new Promise(resolve => setTimeout(resolve, debug.latency));\n        if (debug.shouldRequestsFail) {\n            throw new Error('Simulated failure');\n        }\n        const message: Message = {\n            id: uniqueId(),\n            text,\n            sent: new Date().toISOString(),\n            sender: 'you',\n            recipientId,\n        };\n        return message;\n    }\n}\n","import { Action, Dispatch } from 'redux';\nimport { shallowEqual } from 'react-redux';\nimport { ThunkAction } from 'redux-thunk';\n\ntype AsyncFunction = (...args: any[]) => Promise<any>;\nexport type ResolveType<TPromise> = TPromise extends Promise<infer T> ? T : never;\n\nexport interface AsyncActionState<TArgs = any[]> {\n    loading: boolean;\n    error: Error | null;\n    lastUpdate: number;\n    args: TArgs;\n}\n\nexport const initialAsyncActionState: AsyncActionState = {\n    loading: false,\n    error: null,\n    lastUpdate: 0,\n    args: [],\n};\n\nexport const asyncActionFactory = <TReturnType>(\n    config: <F extends AsyncFunction>(\n        actions: {\n            start: () => Action | void;\n            done: (result: ResolveType<ReturnType<F>>) => Action | void;\n            fail: (error: Error) => Action | void;\n        },\n        asyncFn: F,\n        ...args: Parameters<F>\n    ) => TReturnType,\n) => {\n    return <F extends AsyncFunction>(\n        asyncFn: F,\n        handleUpdate: (...args: Parameters<F>) => (\n            state: AsyncActionState<Parameters<F>>,\n            result?: ResolveType<ReturnType<F>>,\n            error?: Error,\n        ) => Action | void,\n    ) => (...args: Parameters<F>) => {\n        let state: AsyncActionState<Parameters<F>> = { ...initialAsyncActionState, args };\n        const onUpdate = handleUpdate(...args);\n        const start = () => {\n            state = { ...state, loading: true };\n            return onUpdate(state);\n        };\n        const done = (result: ResolveType<ReturnType<F>>) => {\n            state = { ...state, loading: false, lastUpdate: Date.now() };\n            return onUpdate(state, result);\n        };\n        const fail = (error: Error) => {\n            state = { ...state, loading: false, error };\n            return onUpdate(state, undefined, error);\n        };\n        return config({ start, done, fail }, asyncFn, ...args);\n    };\n};\n\nexport const createThunk = asyncActionFactory(({ start, done, fail }, asyncFn, ...args) => {\n    return async (dispatch: Dispatch) => {\n        const startAction = start();\n        startAction && dispatch(startAction);\n        try {\n            const result = await asyncFn(...args);\n            const doneAction = done(result);\n            doneAction && dispatch(doneAction);\n        } catch (e) {\n            const failAction = fail(e);\n            failAction && dispatch(failAction);\n        }\n    };\n});\n\ntype ThunkActionCreator<R, S, E, A extends Action> = (...args: any[]) => ThunkAction<R, S, E, A>;\nexport const callIfNeeded = <R, S, E, A extends Action, F extends ThunkActionCreator<R, S, E, A>>(\n    thunk: F,\n    shouldCall: (...args: Parameters<F>) => boolean,\n) => {\n    return (...args: Parameters<F>): ThunkAction<R | void, S, E, A> => dispatch => {\n        if (shouldCall(...args)) {\n            return dispatch(thunk(...args));\n        }\n    }\n};\n\nexport const isStale = <TArgs extends any[]>(options: { state: AsyncActionState<TArgs>; maxAge?: number }) => {\n    return (...args: TArgs): boolean => {\n        if (options.state.error) {\n            return true;\n        }\n        if (!shallowEqual(args, options.state.args)) {\n            return true;\n        }\n        if (options.state.loading) {\n            return false;\n        }\n        if (!options.state.lastUpdate) {\n            return true;\n        }\n        if (options.maxAge && options.state.lastUpdate && Date.now() - options.state.lastUpdate > options.maxAge) {\n            return true;\n        }\n        return false;\n    };\n};\n","\nexport type PartialRecord<K extends keyof any, T> = {\n    [P in K]?: T;\n};\n\nexport const omit = <T>(obj: T, k: keyof T): T => {\n    if (!obj[k]) {\n        return obj;\n    }\n    const clone = { ...obj };\n    delete clone[k];\n    return clone;\n};\n","import { createSlice, createSliceDictionary } from 'lib/configuredActions';\nimport { Message } from './types';\nimport { MessageService } from './MessageService';\nimport { createThunk, AsyncActionState, initialAsyncActionState } from 'lib/createThunk';\nimport { omit } from 'lib/objects';\nimport { batchActions } from 'redux-batched-actions';\nimport { Action } from 'redux';\n\nexport interface MessageState {\n    messages: Message[];\n    loadAllState: AsyncActionState;\n    sendStates: Record<string, AsyncActionState<[SendRequest]>>;\n}\n\nexport const initialMessageState: MessageState = {\n    messages: [],\n    loadAllState: initialAsyncActionState,\n    sendStates: {},\n};\n\nconst { configureAction, reducer, update } = createSliceDictionary('MESSAGES_BY_CHAT', createSlice(initialMessageState, 'MESSAGE'));\nexport const messageReducer = reducer;\n\nexport const messagesByChatIdReducer = messageReducer;\n\nexport const appendMessage = configureAction<Message>(\n    'APPEND_MESSAGE',\n    message => state => ({ ...state, messages: [ ...state.messages, message ] }),\n);\n\nexport const cancelMessage = configureAction<string>(\n    'CANCEL_SEND_REQUEST',\n    tempId => state => ({ ...state, sendStates: omit(state.sendStates, tempId) }),\n);\n\nexport const updateSendStates = configureAction<AsyncActionState<[SendRequest]>>(\n    'UPDATE_SEND_STATES',\n    sendState => state => {\n        const { sendStates } = state;\n        const [ sendRequest ] = sendState.args;\n        if (!sendState.error && !sendState.loading) {\n            return { ...state, sendStates: omit(sendStates, sendRequest.tempId) };\n        }\n        return { ...state, sendStates: { ...sendStates, [sendRequest.tempId]: sendState } };\n    },\n);\n\nexport const loadAll = createThunk(\n    MessageService.loadAll,\n    recipientId => (loadAllState, messages) => (messages)\n        ? update(recipientId, { loadAllState, messages })\n        : update(recipientId, { loadAllState }),\n);\n\nexport interface SendRequest {\n    tempId: string;\n    recipientId: string;\n    text: string;\n}\n\nexport const sendMessage = createThunk(\n    ({ recipientId, text }: SendRequest) => MessageService.send(recipientId, text),\n    ({ recipientId }) => (sendState, message) => {\n        const actions: Action[] = [ updateSendStates(recipientId, sendState) ];\n        if (message) {\n            actions.push(appendMessage(recipientId, message));\n        }\n        return batchActions(actions);\n    },\n);\n","import React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\n\nimport { sendMessage, SendRequest } from 'modules/message/duck';\nimport { RootDispatch, RootState } from 'root';\nimport { uniqueId } from 'lib/uniqueId';\n\ninterface MessageFormProps {\n    recipientId: string | null;\n    sendMessage: (sendRequest: SendRequest) => void;\n}\n\nexport const MessageForm: React.FC<MessageFormProps> = props => {\n    const [ message, setMessage ] = useState('');\n\n    const onSubmit: React.FormEventHandler<HTMLFormElement> = e => {\n        e.preventDefault();\n        if (!e.currentTarget.checkValidity() || !props.recipientId) {\n            return;\n        }\n        props.sendMessage({ text: message, recipientId: props.recipientId, tempId: uniqueId() });\n        setMessage('');\n    };\n\n    return (\n        <form noValidate onSubmit={onSubmit} style={{ display: 'flex', width: '100%' }}>\n            <div style={{ flexGrow: 1 }}>\n                <input\n                    value={message}\n                    onChange={e => setMessage(e.currentTarget.value)}\n                    required\n                    className=\"input\"\n                />\n            </div>\n            <div style={{ display: 'flex', alignItems: 'center', paddingLeft: 10 }}>\n                <button className=\"btn\">Send</button>\n            </div>\n        </form>\n    );\n};\n\nconst mapStateToProps = (state: RootState) => ({\n    recipientId: state.chat.activeChat,\n});\n\nconst mapDispatchToProps = (dispatch: RootDispatch) => bindActionCreators({\n    sendMessage,\n}, dispatch);\n\nexport const MessageFormContainer = connect(mapStateToProps, mapDispatchToProps)(MessageForm);\n","import React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { sendMessage, cancelMessage, initialMessageState } from 'modules/message/duck';\nimport { RootState } from 'root';\nimport { loadAll } from '../duck';\nimport { callIfNeeded, isStale } from 'lib/createThunk';\n\nexport const MessagePaneContainer: React.FC = () => {\n    const chatId = useSelector((state: RootState) => state.chat.activeChat || '');\n    const messageState = useSelector((state: RootState) => state.recipient[chatId] || initialMessageState);\n    const dispatch = useDispatch();\n    \n    const { loadAllState } = messageState;\n    useEffect(() => {\n        const loadAllIfNeeded = callIfNeeded(loadAll, isStale({ state: loadAllState, maxAge: 1000 * 5 }));\n        if (chatId && !loadAllState.error) {\n            dispatch(loadAllIfNeeded(chatId));\n        }\n    }, [ dispatch, chatId, loadAllState ]);\n\n    return (\n        <React.Fragment>\n            <ul>\n                {messageState.messages.map(message => (\n                    <li key={message.id}>{message.text}</li>\n                ))}\n            </ul>\n            <ul>\n                {Object.keys(messageState.sendStates).map(key => {\n                    const request = messageState.sendStates[key];\n                    const [ sendRequest ] = request.args;\n                    return (\n                        <li key={sendRequest.tempId} style={{ opacity: (request.loading) ? 0.5 : 1 }}>\n                            {sendRequest.text}\n                            {(request.error) && (\n                                <div>\n                                    <span style={{ color: 'red' }}>Couldn't send</span>\n                                    <button\n                                        type=\"button\"\n                                        className=\"btn\"\n                                        onClick={() => dispatch(sendMessage(sendRequest))}\n                                    >\n                                        Retry?\n                                    </button>\n                                    <button\n                                        type=\"button\"\n                                        className=\"btn\"\n                                        onClick={() => dispatch(cancelMessage(sendRequest.recipientId, sendRequest.tempId))}\n                                    >\n                                        Cancel\n                                    </button>\n                                </div>\n                            )}\n                        </li>\n                    );\n                })}\n            </ul>\n            {(messageState.loadAllState.loading) && (\n                <span>loading...</span>\n            )}\n            {(messageState.loadAllState.error) && (\n                <span>\n                    An error occurred.{' '}\n                    <button className=\"btn\" onClick={() => dispatch(loadAll(chatId))}>Retry?</button>\n                </span>\n            )}\n        </React.Fragment>\n    );\n}\n","import { Chat } from '../models/Chat';\n\nexport const mockChats: Chat[] = [\n    {\n        id: '1',\n        name: 'Person 1',\n    },\n    {\n        id: '2',\n        name: 'Person 2',\n    },\n    {\n        id: '3',\n        name: 'Person 3, Person 4',\n    },\n];\n","import { Chat } from './models/Chat';\nimport { mockChats } from './__mocks__/chat';\n\nexport class ChatService {\n\n    static async loadAll(): Promise<Chat[]> {\n        const { debug } = (window as any).store.getState();\n        await new Promise(resolve => setTimeout(resolve, debug.latency));\n        if (debug.shouldRequestsFail) {\n            throw new Error('Simulated failure');\n        }\n        return mockChats;\n    }\n}\n","import { createSlice } from 'lib/configuredActions';\nimport { Chat } from './models/Chat';\nimport { createThunk, AsyncActionState, initialAsyncActionState } from 'lib/createThunk';\nimport { ChatService } from './ChatService';\n\ninterface ChatState {\n    activeChat: string | null;\n    chats: Chat[];\n    loadChatsState: AsyncActionState;\n}\n\nconst initialChatState: ChatState = {\n    activeChat: null,\n    chats: [],\n    loadChatsState: initialAsyncActionState,\n};\n\nconst { reducer, update, configureAction } = createSlice(initialChatState, 'CHAT');\nexport const chatReducer = reducer;\n\nexport const setActiveChat = configureAction<string>(\n    'SET_ACTIVE_CHAT',\n    activeChat => state => ({ ...state, activeChat }),\n);\n\nexport const loadChats = createThunk(\n    ChatService.loadAll,\n    () => (loadChatsState, chats) => (chats)\n        ? update({ loadChatsState, chats })\n        : update({ loadChatsState }),\n);\n","import React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { RootState } from 'root';\nimport { loadChats, setActiveChat } from '../duck';\n\nexport const ChatsContainer: React.FC = () => {\n    const { chats, loadChatsState, activeChat } = useSelector((state: RootState) => state.chat);\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        dispatch(loadChats());\n    }, [ dispatch ]);\n\n    useEffect(() => {\n        if (!activeChat && chats[0]) {\n            dispatch(setActiveChat(chats[0].id));\n        }\n    }, [ dispatch, activeChat, chats ]);\n\n    if (loadChatsState.loading) {\n        return <span>Loading...</span>;\n    }\n\n    return (\n        <React.Fragment>\n            <h1>Chats</h1>\n            <ul className=\"list-reset\">\n                {chats.map(chat => (\n                    <li key={chat.id}>\n                        <button\n                            type=\"button\"\n                            className={`btn btn-100 ${(activeChat === chat.id) && 'btn-active'}`}\n                            onClick={() => dispatch(setActiveChat(chat.id))}\n                        >\n                            {chat.name}\n                        </button>\n                    </li>\n                ))}\n            </ul>\n        </React.Fragment>\n    );\n};\n","import React from 'react';\n\nimport { DebugMenuContainer } from 'modules/debug/containers/DebugMenuContainer';\nimport { MessageFormContainer } from 'modules/message/containers/MessageForm';\nimport { MessagePaneContainer } from 'modules/message/containers/MessagePane';\nimport { ChatsContainer } from 'modules/chat/containers/ChatContainer';\n\nconst App: React.FC = () => {\n    return (\n        <div style={{ width: '100%', height: '100%', display: 'flex' }}>\n            <div style={{ borderRight: '1px solid #999999', width: 300 }}>\n                <ChatsContainer />\n            </div>\n            <div style={{ flexGrow: 1, display: 'flex', flexDirection: 'column' }}>\n                <div style={{ flexGrow: 1 }}>\n                    <MessagePaneContainer />\n                </div>\n                <div style={{ padding: 20 }}>\n                    <MessageFormContainer />\n                </div>\n            </div>\n            <div style={{ position: 'fixed', top: 0, right: 20 }}>\n                <DebugMenuContainer />\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","import { combineReducers, Reducer, Action } from 'redux';\nimport { ThunkDispatch } from 'redux-thunk';\n\nimport { debugReducer } from 'modules/debug/duck';\nimport { messagesByChatIdReducer } from 'modules/message/duck';\nimport { enableBatching } from 'redux-batched-actions';\nimport { chatReducer } from 'modules/chat/duck';\n\nexport const rootReducer = enableBatching(combineReducers({\n    chat: chatReducer,\n    debug: debugReducer,\n    recipient: messagesByChatIdReducer,\n}));\n\ntype ExtractState<TReducer> = TReducer extends Reducer<infer S> ? S : never;\n\nexport type RootState = ExtractState<typeof rootReducer>;\nexport type RootDispatch = ThunkDispatch<RootState, {}, Action>;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport { Provider } from 'react-redux';\nimport thunk from 'redux-thunk';\n\nimport './index.css';\nimport App from './App';\nimport { rootReducer } from 'root';\n\nconst composeEnhancers = (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunk)));\n(window as any).store = store;\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root'),\n);\n"],"sourceRoot":""}